import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.yaml:snakeyaml:1.33'
    }
}

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}


def config = new Yaml().load(new File("config.yaml").newInputStream())

android {
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField "String", "ACCESS_TOKEN_TYPE", "\"${config.tokenType}\""
        buildConfigField "Boolean", "SHOW_WHATS_NEW", "${config.showWhatsNew}"
    }

    namespace 'org.openedx.core'

    flavorDimensions += "env"
    productFlavors {
        prod {
            dimension 'env'
            insertBuildConfigFields(config, it, "PROD")
        }
        develop {
            dimension 'env'
            insertBuildConfigFields(config, it, "DEV")
        }
        stage {
            dimension 'env'
            insertBuildConfigFields(config, it, "STAGE")
        }
    }

    sourceSets {
        develop {
            res.srcDirs = ['src/openedx/res']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "$compose_compiler_version"
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    //AndroidX
    api "androidx.core:core-ktx:$core_version"
    api "androidx.appcompat:appcompat:$appcompat_version"
    api "com.google.android.material:material:$material_version"
    api "androidx.fragment:fragment-ktx:$fragment_version"
    api "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    api "androidx.viewpager2:viewpager2:$viewpager2_version"
    api "androidx.window:window:$window_version"
    api "androidx.work:work-runtime-ktx:$work_version"

    //Android Jetpack
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Room
    api "androidx.room:room-runtime:$room_version"
    api "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Compose
    api "androidx.compose.runtime:runtime:$compose_version"
    api "androidx.compose.runtime:runtime-livedata:$compose_version"
    api "androidx.compose.ui:ui:$compose_version"
    api "androidx.compose.material:material:$compose_version"
    api "androidx.compose.foundation:foundation:$compose_version"
    debugApi "androidx.compose.ui:ui-tooling:$compose_version"
    api "androidx.compose.ui:ui-tooling-preview:$compose_version"
    api "androidx.compose.material:material-icons-extended:$compose_version"
    debugApi "androidx.customview:customview:1.2.0-alpha02"
    debugApi "androidx.customview:customview-poolingcontainer:1.0.0"

    //Networking
    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    api "com.squareup.retrofit2:converter-gson:$retrofit_version"
    api "com.squareup.okhttp3:logging-interceptor:$logginginterceptor_version"

    // Koin DI
    api "io.insert-koin:koin-core:$koin_version"
    api "io.insert-koin:koin-android:$koin_version"

    api "io.coil-kt:coil-compose:$coil_version"
    api "io.coil-kt:coil-gif:$coil_version"

    api "org.jsoup:jsoup:$jsoup_version"

    api platform("com.google.firebase:firebase-bom:$firebase_version")
    api 'com.google.firebase:firebase-common-ktx'
    api "com.google.firebase:firebase-crashlytics-ktx"
    api "com.google.firebase:firebase-analytics-ktx"

    //Play In-App Review
    api "com.google.android.play:review-ktx:$in_app_review"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

class FirebaseConfig {
    public String projectId = ""
    public String appId = ""
    public String apiKey = ""
    public String gcmSenderId = ""
}

def getFirebaseConfig(envMap) {
    FirebaseConfig config = new FirebaseConfig()
    if (envMap.value["FIREBASE"] != null) {
        config.projectId = setValue(envMap.value["FIREBASE"]["PROJECT_ID"])
        config.appId = setValue(envMap.value["FIREBASE"]["APPLICATION_ID"])
        config.apiKey = setValue(envMap.value["FIREBASE"]["API_KEY"])
        config.gcmSenderId = setValue(envMap.value["FIREBASE"]["GCM_SENDER_ID"])
    }
    return config
}

def setValue(value) {
    def result
    if (value == null) {
        result = ""
    } else {
        result = value
    }
    return result
}

def insertBuildConfigFields(config, buildType, String keyName) {
    def envMap = config.environments.find { it.key == keyName }
    def clientId = envMap.value.OAUTH_CLIENT_ID
    def envUrls = envMap.value.URLS
    def firebase = getFirebaseConfig(envMap)

    buildType.buildConfigField "String", "BASE_URL", "\"${envUrls.API_HOST_URL}\""
    buildType.buildConfigField "String", "CLIENT_ID", "\"${clientId}\""
    buildType.buildConfigField "String", "FIREBASE_PROJECT_ID", "\"${firebase.projectId}\""
    buildType.buildConfigField "String", "FIREBASE_API_KEY", "\"${firebase.apiKey}\""
    buildType.buildConfigField "String", "FIREBASE_GCM_SENDER_ID", "\"${firebase.gcmSenderId}\""
    buildType.resValue "string", "google_app_id", firebase.appId
    buildType.resValue "string", "platform_name", config.platformName
    buildType.resValue "string", "platform_full_name", config.platformFullName
    buildType.resValue "string", "privacy_policy_link", envUrls.privacyPolicy
    buildType.resValue "string", "terms_of_service_link", envUrls.termsOfService
    buildType.resValue "string", "contact_us_link", envUrls.contactUs
    buildType.resValue "string", "feedback_email_address", envUrls.FEEDBACK_EMAIL_ADDRESS
}
